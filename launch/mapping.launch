<launch>
  <arg name="gui"        default="true"/>
  <arg name="world_file" default="$(find project2)/worlds/project2.world"/>

<!-- Initial pose (in feet and degrees) -->
  <arg name="x_feet" default="1.0"/>
  <arg name="y_feet" default="1.0"/>
  <arg name="z" default="0.0"/>
  <arg name="yaw_deg" default="90.0"/>

  <arg name="base"       value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"    value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
  <arg name="stacks"     value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>

  <include file="$(find project2)/launch/includes/$(arg base).launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
    <!-- Transform world coordinates to Gazebo: gazebo_x = -world_y, gazebo_y = world_x -->
    <arg name="x" value="$(eval -arg('y_feet') / 3.28084)"/>
    <arg name="y" value="$(eval arg('x_feet') / 3.28084)"/>
    <arg name="z" value="$(arg z)"/>
    <!-- Adjust yaw angle for 90° rotation: gazebo_yaw = world_yaw - 90° -->
    <arg name="yaw" value="$(eval (arg('yaw_deg') - 90.0) * 3.14159265359 / 180.0)"/>
  </include>
  
  <node pkg="project2" type="task_planner.py" name="task_planner" output="screen">
    <param name="tasks_text"
           value="((2, 3), (9, 8))&#10;((12, 9), (4, 14))"/>

    <!-- Pass spawn position directly (already in feet and degrees) -->
    <param name="start_x_feet" value="$(arg x_feet)"/>
    <param name="start_y_feet" value="$(arg y_feet)"/>
    <param name="start_theta_deg" value="$(arg yaw_deg)"/>
  </node>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="camera_depth_frame"/>
    <param name="range_min" value="0"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  <arg name="custom_gmapping_launch_file" default="$(find turtlebot_navigation)/launch/includes/gmapping/$(arg 3d_sensor)_gmapping.launch.xml"/>
  <include file="$(arg custom_gmapping_launch_file)"/>

  <node pkg="project2" type="execution_monitor.py" name="execution_monitor" output="screen">
    <!-- Pass spawn position so monitor knows robot's absolute starting location -->
    <param name="start_x_feet" value="$(arg x_feet)"/>
    <param name="start_y_feet" value="$(arg y_feet)"/>
  </node>
  <node pkg="project2" type="navigation_controller.py" name="navigation_controller" output="screen">
    <!-- Pass spawn position so controller knows its absolute starting location -->
    <param name="start_x_feet" value="$(arg x_feet)"/>
    <param name="start_y_feet" value="$(arg y_feet)"/>
  </node>


  <include file="$(find turtlebot_rviz_launchers)/launch/view_navigation.launch"/>
</launch>